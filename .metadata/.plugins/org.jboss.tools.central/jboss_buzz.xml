<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><entry><title>The benefits of Fedora 38 long double transition in ppc64le</title><link rel="alternate" href="https://developers.redhat.com/articles/2023/05/16/benefits-fedora-38-long-double-transition-ppc64le" /><author><name>Tulio Magno Quites Machado Filho</name></author><id>d06118ad-f5ac-4f38-b98b-6c5dbb3514a6</id><updated>2023-05-16T07:00:00Z</updated><published>2023-05-16T07:00:00Z</published><summary type="html">&lt;p&gt;Fedora 38 is will have a new feature for ppc64le. Clang has begun using the IEEE 128-bit long double by default instead of the IBM 128-bit long double format. This allows Clang to behave the same way as GCC, which switched to IEEE 128-bit long double on ppc64le on &lt;a href="https://fedoraproject.org/wiki/Releases/36/ChangeSet#New_128-bit_IEEE_long_double_ABI_for_IBM_64-bit_POWER_LE"&gt;Fedora 36&lt;/a&gt;. This floating point format benefits from the hardware implementation available on IBM® Power9® processor-based servers and IBM® Power10™ processor-based servers.&lt;/p&gt; &lt;h2 id="background"&gt;Background of the floating point format&lt;/h2&gt; &lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/IBM_System/360_Model_85"&gt;IBM System/360 Model 85&lt;/a&gt; was released in 1968 and supported a 128-bit extended precision floating point format. A few decades later this format became known in the open source communities as IBM 128-bit long double or IBM double-double.&lt;/p&gt; &lt;p&gt;This floating point format provides a mantissa of 106 bits, 11 bits for the exponent and a signal bit. Meanwhile, its 64-bit floating point format provides a matissa of 53 bits, 11 bits as the exponent and a signal bit. According to the &lt;a href="https://www.ibm.com/docs/en/aix/7.1?topic=sepl-128-bit-long-double-floating-point-data-type"&gt;IBM® AIX® documentation&lt;/a&gt;, this data type can store numbers with more precision than the 64-bit data type, it does not store numbers of greater magnitude.&lt;/p&gt; &lt;p&gt;In 1985, the IEEE 754 Working Group for binary floating-point arithmetic established the &lt;a href="https://en.wikipedia.org/wiki/IEEE_754"&gt;IEEE Standard 754-1985&lt;/a&gt;, defining two binary floating point formats: a 32-bit (&lt;code&gt;binary32&lt;/code&gt;) and a 64-bit (&lt;code&gt;binary64&lt;/code&gt;). The C language was also in the process of standardization, requiring compilers to support at least three different binary floating point types called &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, and &lt;code&gt;long double&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The ppc64le architecture on Linux adopted the &lt;code&gt;binary32&lt;/code&gt; format as &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;binary64&lt;/code&gt; as &lt;code&gt;double&lt;/code&gt; and &lt;code&gt;ibm128&lt;/code&gt; as &lt;code&gt;long double&lt;/code&gt;, inheriting the same formats for the newer little endian architecture used on the older big endian ppc64.&lt;/p&gt; &lt;p&gt;In 2008, the IEEE Computer Society published the IEEE Std 754-2008, introducing an 128-bit binary floating point format (&lt;code&gt;binary128&lt;/code&gt;).&lt;/p&gt; &lt;table&gt;&lt;thead&gt;&lt;tr class="header"&gt;&lt;th&gt;Format&lt;/th&gt; &lt;th&gt;Signal bits&lt;/th&gt; &lt;th&gt;Exponent bits&lt;/th&gt; &lt;th&gt;Mantissa bits&lt;/th&gt; &lt;th&gt;Size (Bytes)&lt;/th&gt; &lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr class="odd"&gt;&lt;td&gt;&lt;code&gt;binary32&lt;/code&gt;&lt;/td&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;8&lt;/td&gt; &lt;td&gt;24&lt;/td&gt; &lt;td&gt;4&lt;/td&gt; &lt;/tr&gt;&lt;tr class="even"&gt;&lt;td&gt;&lt;code&gt;binary64&lt;/code&gt;&lt;/td&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;11&lt;/td&gt; &lt;td&gt;53&lt;/td&gt; &lt;td&gt;8&lt;/td&gt; &lt;/tr&gt;&lt;tr class="odd"&gt;&lt;td&gt;&lt;code&gt;binary128&lt;/code&gt;&lt;/td&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;15&lt;/td&gt; &lt;td&gt;113&lt;/td&gt; &lt;td&gt;16&lt;/td&gt; &lt;/tr&gt;&lt;tr class="even"&gt;&lt;td&gt;&lt;code&gt;ibm128&lt;/code&gt;&lt;/td&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;11&lt;/td&gt; &lt;td&gt;106&lt;/td&gt; &lt;td&gt;16&lt;/td&gt; &lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;In 2017, IBM introduced the Power9 processor with native hardware support for the &lt;code&gt;binary128&lt;/code&gt; format, leading the way to changing the default &lt;code&gt;long double&lt;/code&gt; type used in C and C++. However, this transition occurred only on ppc64le because it requires an IBM® Power8® processor or newer. The same transition on ppc64 is more complex because it may run on processors that do not support 128-bit registers from VSX or Altivec, requiring an emulation to happen on 64-bit general purpose registers as well as different rules for argument passing.&lt;/p&gt; &lt;h2&gt;How to transition to IEEE 128-bit long double&lt;/h2&gt; &lt;p&gt;In most cases, programs and libraries will not require any modifications. They must be rebuilt with the Clang provided with Fedora 38 to start using the IEEE 128-bit long double. While &lt;a href="https://www.nextplatform.com/2016/08/24/big-blue-aims-sky-power9/"&gt;IBM Power9&lt;/a&gt; introduced native hardware support for &lt;code&gt;binary128&lt;/code&gt;, a &lt;code&gt;long double&lt;/code&gt; based on this format also works on IBM Power8. The only difference is the performance improvement that newer processors provide.&lt;/p&gt; &lt;p&gt;Note that programs built with a previous version of Clang will continue to work using the IBM 128-bit long double.&lt;/p&gt; &lt;h3&gt;Adapting code to IEEE 128-bit long double&lt;/h3&gt; &lt;p&gt;There is a small group of programs that make assumptions about which &lt;code&gt;long double&lt;/code&gt; format ppc64le uses. In those cases, these programs have to be modified.&lt;/p&gt; &lt;p&gt;When rewriting this code, I suggest taking advantage of the features provided by the ISO C standard to write code that will be executed correctly on different processors and operating systems, regardless of the &lt;code&gt;long double&lt;/code&gt; format used by the C Library (e.g., using the &lt;a href="https://www.gnu.org/software/libc/manual/html_node/Floating-Point-Parameters.html#index-LDBL_005fMANT_005fDIG"&gt;macro LDBL_MANT_DIG&lt;/a&gt;) as follows:&lt;/p&gt; &lt;div class="sourceCode" id="cb1"&gt; &lt;pre class="c sourceCode"&gt; &lt;code class="sourceCode c"&gt;&lt;span class="pp"&gt;#include &lt;span class="im"&gt;&lt;float.h&gt; &lt;span class="pp"&gt;#if LDBL_MANT_DIG == 113 &lt;span class="co"&gt;/* Insert code for IEEE binary128 long double. */ &lt;span class="pp"&gt;#elif LDBL_MANT_DIG == 106 &lt;span class="co"&gt;/* Insert code for IBM 128-bit long double. */ &lt;span class="pp"&gt;#elif LDBL_MANT_DIG == 64 &lt;span class="co"&gt;/* Insert code for Intel 80-bit long double. */ &lt;span class="pp"&gt;#elif LDBL_MANT_DIG == 53 &lt;span class="co"&gt;/* Insert code for IEEE binary64 long double. */ &lt;span class="pp"&gt;#endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h2&gt;You can still use IBM 128-bit long double&lt;/h2&gt; &lt;p&gt;It is also possible to continue using the IBM 128-bit long double with Clang on Fedora 38. When building the source code, ensure the parameters &lt;code&gt;-mabi=ibmlongdouble -mlong-double-128&lt;/code&gt; are passed to Clang as follows:&lt;/p&gt; &lt;div class="sourceCode" id="cb2"&gt; &lt;pre class="sh sourceCode"&gt; &lt;code class="sourceCode bash"&gt;$ clang -c -mabi=ibmlongdouble &lt;span class="at"&gt;-mlong-double-128 test.c -o test.o&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;The same parameters also work on GCC.&lt;/p&gt; &lt;p&gt;C++ programs built with Clang must also get linked to libstdc++ because other libraries, such as libc++, do not support both &lt;code&gt;long double&lt;/code&gt; formats. The Fedora builds of Clang use libstdc++ by default, but if you would like to enforce the usage of libstdc++, use &lt;code&gt;-stdlib=libstdc++&lt;/code&gt; when calling &lt;code&gt;clang++&lt;/code&gt;, as follows:&lt;/p&gt; &lt;div class="sourceCode" id="cb3"&gt; &lt;pre class="sh sourceCode"&gt; &lt;code class="sourceCode bash"&gt;$ clang++ &lt;span class="at"&gt;-c -mabi=ibmlongdouble &lt;span class="at"&gt;-mlong-double-128 &lt;span class="at"&gt;-stdlib&lt;span class="op"&gt;=libstdc++ test.cc &lt;span class="at"&gt;-o test.o&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h2&gt;Benefits of transitioning to IEEE 128-bit long double&lt;/h2&gt; &lt;p&gt;The transition to IEEE 128-bit long double on ppc64le will allow programs to compute numbers with greater magnitude and more precision without causing any performance regressions on IBM Power9 and newer processors. This transition is expected to help scientific and engineering programs as well as improve platform compatibility with well-established standards.&lt;/p&gt; &lt;p&gt;Feel free to comment below if you have questions or comments. We welcome your feedback.&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2023/05/16/benefits-fedora-38-long-double-transition-ppc64le" title="The benefits of Fedora 38 long double transition in ppc64le"&gt;The benefits of Fedora 38 long double transition in ppc64le&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Tulio Magno Quites Machado Filho</dc:creator><dc:date>2023-05-16T07:00:00Z</dc:date></entry><entry><title type="html">Q2 2023 RESTEasy Quarterly Releases</title><link rel="alternate" href="https://resteasy.dev/2023/05/16/resteasy-releases/" /><author><name /></author><id>https://resteasy.dev/2023/05/16/resteasy-releases/</id><updated>2023-05-16T04:11:11Z</updated><dc:creator /></entry><entry><title type="html">SERVERLESS WORKFLOW EDITOR NEW FEATURE: JQ EXPRESSION AUTO COMPLETIONS</title><link rel="alternate" href="https://blog.kie.org/2023/05/serverless-workflow-editor-new-feature-jq-expression-auto-completions.html" /><author><name>Ajay Jaganathan</name></author><id>https://blog.kie.org/2023/05/serverless-workflow-editor-new-feature-jq-expression-auto-completions.html</id><updated>2023-05-15T16:23:06Z</updated><content type="html">In Serverless Workflow each instance is associated with a data model. These models consist of JSON objects. The data inside these models needs to be accessed and updated throughout the flow execution. jq is a powerful filtering tool that makes working with JSON data seamless. The Serverless Workflow specification supports the use of in multiple places. WHAT’S NEW? In order to improve the authoring experience for the user while working with these expressions, a new auto-completion capability is added to the editor. These features are available in the VS Code extension as well as the Serverless Logic Web Tools and work with both JSON and YAML files. REQUIREMENTS: * (0.28.0) * (0.28.0) * (1.66.0+) The jq auto-completion feature can be categorized into three: * The built-in functions * The workflow variables * The reusable function expressions THE BUILT-IN FUNCTIONS: These are functions provided by jq out of the box. These functions come in handy to do a lot of operations like max, min, length, etc. The completion provides a list of these functions along with a description of what it does so that the user does not have to read the docs every time. More information on the built-in functions can be found . Built-in function completions THE WORKFLOW VARIABLES: Workflow variable completions The serverless workflow works with a lot of variables, which are provided to the project in the form of a JSON schema, an open API file, or an async API file. A Variable in Serverless Workflow always starts with a .(DOT). The auto-completion feature parses these files (if present), extracts the variables, and provides the completion result to the user. Please note that the auto-completion feature is able to parse files in a remote URL as well as a local file system. In the first part of the video above, there is a JSON schema file present in the path: resources/schema/expression.json. The jq expressions can work in certain places and one of them is in the operation of functions which is of type expression. As you can see, the JSON schema has numbers, x, and y in its properties which are listed in the completion items. Please note that remote URLs are also supported for JSON schema. In the second part of the video, we have a function (Check action on RHODS) and this is an OpenAPI specification. We use a remote URL here and we see in the OpenAPI file some parameters available like noOfRunningPods, avgLoad, etc while trying to use the auto-complete we can see these values appearing in the completion item list. Please note that local files (eg: resources/spec/multiplication.yaml) also works. In the third part of the video we have a function which is of type async API and the corresponding file is present in the resources/spec/resume-event.yaml. When trying to auto-complete, we parse the async api file and extract the parameters out of it and show the completion items. Please note that this also works with remote URLs. THE REUSABLE FUNCTION EXPRESSIONS: A reusable is a function definition inside the functions array, which has a type (field) expression and a jq expression as the value for the operation field. These functions can be reused in the specification using the fn: followed by name of the function. The auto-completion feature also provides a list of these functions present in the functions array. Reusable function expression completion Note: The expressions can be used in various places. To know more about the usage please visit . CONCLUSION: The auto-completion feature assists the user in writing the jq expressions and thus improves the authoring experience. In order to learn more about the jq expression in Serverless Workflow, please visit our blog post on  . Stay tuned to get more updates on the upcoming features for the Serverless Workflow. The post appeared first on .</content><dc:creator>Ajay Jaganathan</dc:creator></entry><entry><title>How to use the new OpenShift quick starts to deploy JBoss EAP</title><link rel="alternate" href="https://developers.redhat.com/articles/2023/05/15/how-use-new-openshift-quick-starts-deploy-jboss-eap" /><author><name>Philip Hayes</name></author><id>b003b810-2061-4968-b29f-1864808c85b3</id><updated>2023-05-15T07:00:00Z</updated><published>2023-05-15T07:00:00Z</published><summary type="html">&lt;p&gt;In the articles, &lt;a href="https://developers.redhat.com/articles/2022/01/12/how-migrate-your-java-applications-red-hat-openshift"&gt;How to migrate your Java applications to Red Hat OpenShift&lt;/a&gt; and &lt;a href="https://developers.redhat.com/articles/2022/10/13/how-deploy-jboss-eap-applications-openshift-pipelines"&gt;How to deploy JBoss EAP applications with OpenShift Pipelines&lt;/a&gt;, we covered the technologies utilized to build and deploy &lt;a href="https://www.redhat.com/en/technologies/jboss-middleware/application-platform"&gt;Red Hat JBoss Enterprise Application Platform&lt;/a&gt; images on OpenShift. These technologies include Source to Image (S2I), Helm charts, build configs, deployment configs, tekton pipelines, and ingress routes. While these technologies will be familiar to developers experienced with Kubernetes and containerization, a Jakarta EE developer coming from a traditional JBoss EAP background may be new to these tools.&lt;/p&gt; &lt;p&gt;To help bridge the gap between traditional EAP deployments and OpenShift deployments, Red Hat has created a series of OpenShift quick starts focused on the tools and techniques involved with building and deploying JBoss EAP images on OpenShift. These quick starts provide step-by-step instructions for deploying a JBoss EAP application on OpenShift. They will also explain what is happening at each stage and how to validate each stage you complete.&lt;/p&gt; &lt;p&gt;The first quick start released is a simple JBoss EAP "Hello World" application deployment using Helm charts. This quick start includes the following tasks:&lt;/p&gt; &lt;ul&gt;&lt;li aria-level="1"&gt;Creating a JBoss EAP 7 application with Helm.&lt;/li&gt; &lt;li aria-level="1"&gt;Viewing the Helm release.&lt;/li&gt; &lt;li aria-level="1"&gt;Viewing the associated code.&lt;/li&gt; &lt;li aria-level="1"&gt;Viewing the build status.&lt;/li&gt; &lt;li aria-level="1"&gt;Viewing the pod status.&lt;/li&gt; &lt;li aria-level="1"&gt;Running the JBoss EAP 7 application.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;We will demonstrate quick start in this article.&lt;/p&gt; &lt;h2&gt;Prerequisites&lt;/h2&gt; &lt;ul&gt;&lt;li aria-level="1"&gt;OpenShift CLI tool (optional)&lt;/li&gt; &lt;li aria-level="1"&gt;Openshift 4.x cluster with cluster admin permissions&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The quick start will be available with OpenShift 4.14.  In the mean time, you can add it by following the instructions below.&lt;/p&gt; &lt;h2&gt;Install the quick start using OpenShift CLI&lt;/h2&gt; &lt;p&gt;To download the OpenShift CLI, follow these steps:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;Click on the &lt;strong&gt;?&lt;/strong&gt; in the top right hand corner of the OpenShift UI.&lt;/li&gt; &lt;li&gt;Select &lt;strong&gt;Command line tools&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;Download and install the command line client for your OS.&lt;/li&gt; &lt;li&gt;Log in as cluster admin.&lt;/li&gt; &lt;li&gt;Run the following command:&lt;/li&gt; &lt;/ol&gt;&lt;pre&gt; &lt;code class="language-bash"&gt;oc apply -f https://raw.githubusercontent.com/jboss-eap-up-and-running/openshift-console-quickstarts/main/jboss-eap7-with-helm.yaml&lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;Install the quick start using the OpenShift UI&lt;/h2&gt; &lt;p&gt;After logging in to OpenShift as cluster administrator, follow these steps:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;To create the quick start via the OpenShift UI, click on the &lt;strong&gt;+&lt;/strong&gt; icon in the top right hand corner of the UI.&lt;/li&gt; &lt;li&gt;Paste the contents of this link: https://raw.githubusercontent.com/jboss-eap-up-and-running/openshift-console-quickstarts/main/jboss-eap7-with-helm.yaml&lt;/li&gt; &lt;li&gt;Click on &lt;strong&gt;Create&lt;/strong&gt; to create the quick start.&lt;/li&gt; &lt;/ol&gt;&lt;h2&gt;Deploy JBoss EAP 7 using quick start&lt;/h2&gt; &lt;p&gt;In the OpenShift developer UI, click &lt;strong&gt;+Add&lt;/strong&gt; and select &lt;strong&gt;View all quick starts&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;In the search field, enter &lt;strong&gt;eap&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;When you see the &lt;strong&gt;Get started with JBoss EAP 7 using a Helm Chart&lt;/strong&gt; quick start listed (Figure 1), select this quick start to begin.&lt;/p&gt; &lt;figure class="align-center" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/start_0.jpg" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/start_0.jpg?itok=xkUK-gmG" width="600" height="350" alt="The get started with JBoss EAP 7 using a Helm Chart option is shown in Red Hat OpenShift UI." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt;&lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt;Figure 1: The JBoss EAP quick start page.&lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;When a panel opens with instructions, click &lt;strong&gt;Start&lt;/strong&gt; to begin (Figure 2).&lt;/p&gt; &lt;p&gt;In this initial panel, you will follow the steps required to locate and install the JBoss EAP 7.4 Helm chart. You don't need to change any default settings presented by the Helm configuration.&lt;/p&gt; &lt;p&gt;Once you click &lt;strong&gt;Install&lt;/strong&gt;, the user interface will switch to the Topology view and show the &lt;strong&gt;Release notes&lt;/strong&gt; from the Helm chart, as shown in Figure 2.&lt;/p&gt; &lt;figure class="align-center" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/step2_0.jpg" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/step2_0.jpg?itok=hxw6ys2v" width="600" height="348" alt="A panel shows instructions to build and deploy a JBoss EAP application on OpenShift using Helm charts." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt;&lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt;Figure 2: The steps to build and deploy a JBoss EAP application on OpenShift using Helm charts.&lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Click &lt;strong&gt;Next&lt;/strong&gt; to open the &lt;strong&gt;Check your work&lt;/strong&gt; panel, as shown in Figure 3. This panel contains questions about the results. It gives you the opportunity to review your work and confirm that you successfully completed the task before advancing to the next task in the quick start.&lt;/p&gt; &lt;figure class="align-center" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/stage1-check.jpg" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/stage1-check.jpg?itok=YI5utL8U" width="384" height="319" alt="The quick start "Check your work" panel." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt;&lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt;Figure 3: The quick start "Check your work" panel, confirming Helm deployed.&lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;This is where the quick start helps you understand what was created by the Helm chart. You will be able to identify the Helm release and the eap74 deployment. Click &lt;strong&gt;Yes&lt;/strong&gt; and then click &lt;strong&gt;Next&lt;/strong&gt; to move onto the next section.&lt;/p&gt; &lt;p&gt;This section will guide you through locating the Helm release we just installed. You will be able to view the list of resources (Figure 4).&lt;/p&gt; &lt;figure class="align-center" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/step3_0.jpg" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/step3_0.jpg?itok=1NUVTnI_" width="600" height="349" alt="A list of Helm chart resources." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt;&lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt;Figure 4: View a list of Helm chart resources.&lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;It will prompt you to verify the results again. Validate that you can see the deployed label next to the Helm release and click &lt;strong&gt;Next&lt;/strong&gt; to move to the next section.&lt;/p&gt; &lt;p&gt;You will now be guided through viewing the source code associated with the quick start. There is another verification to confirm that you have successfully completed this step.&lt;/p&gt; &lt;p&gt;Move on to the next section, which describes how the Helm release created two builds. The &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html/getting_started_with_jboss_eap_for_openshift_container_platform/build_run_java_app_s2i#chained-build-support-eap_default"&gt;build process for JBoss EAP applications utilizes two builds&lt;/a&gt;, an artifact build and a runtime build. The artifact build performs a maven build to create the application artifact. The runtime build deploys the output of this build to an instance of EAP. This results in a much smaller footprint for the runtime image containing the minimum file necessary to run the application.&lt;/p&gt; &lt;p&gt;Once you have completed this check, click &lt;strong&gt;Yes&lt;/strong&gt; to move on to the next check where you will be directed back to view the topology and the running pod status. Follow the instructions to check the status of the pod and complete the check.&lt;/p&gt; &lt;p&gt;Finally, you will be shown how to open the application by clicking on the external URL. Once you have completed this stage, you can complete the final check.&lt;/p&gt; &lt;p&gt;Viewing the external URL will open up a new browser window shown in Figure 5:&lt;/p&gt; &lt;figure class="align-center" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/final-page_0.jpg" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/final-page_0.jpg?itok=ltVqGRhZ" width="600" height="351" alt="The screen shows successful deployment of JBoss EAP application deployment on OpenShift." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt;&lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt;Figure 5: This page shows successful deployment of JBoss EAP application deployment on OpenShift.&lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;You have now completed the quick start. You should see the completed stages of the quick start listed, as shown in Figure 6:&lt;/p&gt; &lt;figure class="align-center" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/final-ticks_0.jpg" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/final-ticks_0.jpg?itok=zyjkUmcC" width="419" height="466" alt="The completed stages of the quick start are listed." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt;&lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt;Figure 6: Quick start final checks listed.&lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;The new quick starts simplify JBoss EAP deployment&lt;/h2&gt; &lt;p&gt;In this article, we demonstrated the new JBoss EAP quick start, designed to guide developers familiar with traditional &lt;a href="https://www.redhat.com/en/technologies/jboss-middleware/application-platform"&gt;JBoss EAP&lt;/a&gt; deployments through the steps to build and deploy application images on OpenShift. The quick start helps developers understand how to use Helm to create the build configs, deployment configs, and external routes required to build and deploy JBoss EAP applications on OpenShift. This quick start uses a sample Git repo with a sample EAP application. Developers will be able to use the same approach to use their own sample applications.&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2023/05/15/how-use-new-openshift-quick-starts-deploy-jboss-eap" title="How to use the new OpenShift quick starts to deploy JBoss EAP"&gt;How to use the new OpenShift quick starts to deploy JBoss EAP&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Philip Hayes</dc:creator><dc:date>2023-05-15T07:00:00Z</dc:date></entry><entry><title>Using Pact and Quarkus to Tame Microservices Testing</title><link rel="alternate" href="&#xA;                https://quarkus.io/blog/pact-and-quarkus-3/&#xA;            " /><author><name>Holly Cummins (https://twitter.com/holly_cummins)</name></author><id>https://quarkus.io/blog/pact-and-quarkus-3/</id><updated>2023-05-15T00:00:00Z</updated><published>2023-05-15T00:00:00Z</published><summary type="html">In a microservices architecture, making sure each microservices works is (relatively) easy. The microservices are usually small, and easy to test. But how do you make sure the microservices work together? How do you know if the system as a whole works? One answer is contract testing. Contract testing gives...</summary><dc:creator>Holly Cummins (https://twitter.com/holly_cummins)</dc:creator><dc:date>2023-05-15T00:00:00Z</dc:date></entry><entry><title type="html">New DMN boxed expression editor</title><link rel="alternate" href="https://blog.kie.org/2023/05/new-dmn-boxed-expression-editor.html" /><author><name>Jozef Marko</name></author><id>https://blog.kie.org/2023/05/new-dmn-boxed-expression-editor.html</id><updated>2023-05-12T16:45:40Z</updated><content type="html">We’re excited to announce the completion of the new generation of the Boxed Expression editor! We the beginning of this process some time ago, if you are a regular blog visitor you should remember that. During that time, we made the new component available on the Alpha version, giving the user the choice to use the stable version or experiment with the new one. During that phase, we received a lot of comments and suggestions to improve more the component, thanks to anyone involved! DMN MODERNIZATION The new version of the boxed expression editor represents the first step towards the ultimate goal of the DMN Editor modernization, which will include additional refactoring, technology updates, and general performance and usability improvements! With the , we are confident that the new boxed expression editor reached a good level of usability improvements. We tested the new component and summarized the unfinished tasks and the next features in . However, we are sure similar huge refactoring needs huge help from community members testing and giving feedback. So feel free to report a or contact us on chat. INLINE ADD ROWS/COLUMNS With this addition, users do not need to open the context menu and decide if they want to add rows or columns. Row leading cells or header menu cells display a small plus icon on hovering them. Once this plus icon is clicked, a row or column is added. Please notice the small plus icon in the bottom left corner of the picture below. COPY/CUT/PASTE ENTIRE EXPRESSIONS With this addition, users should be more productive in implementing similar expressions. Often it is a case users implement more expressions with just small differences. In the screenshot above, the user is copying the whole ‘Invocation’ expression. The same can be done for a whole root ‘Context’ expression from the screenshot. Once expression is copied or cut, user can invoke the same context menu over a target cell and click the ‘Paste’ option. THE NEW SELECTION MECHANISM With this addition, we bring user experience known from other grid/table editors, where users can select cells simply by dragging a rectangle over the desired area. In combination with copy and paste feature, it can be a very productive way to design a decision table. Imagine a scenario like below. Then simply press ‘Ctrl + S’, select the target top left cell, and press ‘Ctrl + V’ (shortcuts may differ across platforms) resulting in a decision table like below. RESIZING CELLS From now on, the user can resize cells using the new resizer bar. It is shown once a cell has hovered. Users can simply drag and drop it to resize a cell. Please notice the grey bar in the picture below next to the ‘Insufficient’ string. THE NEW INLINE DESCRIPTIONS With this addition, we are trying to make our tool more self documented. Especially for new users different hit policies and expression types may be confusing or not clear enough. We believe users will be more productive when they find some documentation for them directly in the tool. THE DMN RUNNER TABLE IMPROVED EXPERIENCE You will notice we are now reusing the box expression component for DMN Runner tabular view. That is a great step in unifying user experience during interacting with our tool in more places. We are going to bring the same component also for SceSim test scenarios, but it will be a topic for the next blog posts. In the meantime, feel free to try DMN Runner tabular view. The post appeared first on .</content><dc:creator>Jozef Marko</dc:creator></entry><entry><title type="html">Podman Desktop: A Beginner’s Guide to Containerization</title><link rel="alternate" href="https://www.mastertheboss.com/soa-cloud/docker/podman-desktop-a-beginners-guide-to-containerization/" /><author><name>F.Marchioni</name></author><id>https://www.mastertheboss.com/soa-cloud/docker/podman-desktop-a-beginners-guide-to-containerization/</id><updated>2023-05-12T08:47:50Z</updated><content type="html">Podman is a popular containerization tool that allows users to manage containers, images, and other related resources. The Podman Desktop Tool is an easy-to-use graphical interface for managing Podman containers on your desktop. In this tutorial, we’ll go over how to use the Podman Desktop Tool to manage WildFly container image, covering some of its ... The post appeared first on .</content><dc:creator>F.Marchioni</dc:creator></entry><entry><title type="html">Eclipse Vert.x 4.4.2 released!</title><link rel="alternate" href="https://vertx.io/blog/eclipse-vert-x-4-4-2" /><author><name>Julien Viet</name></author><id>https://vertx.io/blog/eclipse-vert-x-4-4-2</id><updated>2023-05-12T00:00:00Z</updated><content type="html">Eclipse Vert.x version 4.4.2 has just been released. It fixes CVE-2023-32081 and quite a few bugs that have been reported by the community</content><dc:creator>Julien Viet</dc:creator></entry><entry><title type="html">Simplifying Drools Tests with AssertJ</title><link rel="alternate" href="https://blog.kie.org/2023/05/simplifying-drools-tests-with-assertj.html" /><author><name>Paolo Bizzarri</name></author><id>https://blog.kie.org/2023/05/simplifying-drools-tests-with-assertj.html</id><updated>2023-05-11T12:10:59Z</updated><content type="html">INTRODUCTION Creating clean, concise, and maintainable tests is crucial for any software project. In this post, we will discuss the ongoing refactoring process for Drools tests and illustrate how these techniques can benefit other projects. By leveraging the expressiveness of AssertJ assertions, we aim to enhance readability and conciseness, leading to more efficient and easily comprehensible tests. THE ORIGINAL CODE The code used in this example comes from the drools project. The test class is BackwardChainingTest and the test method is testQueryWithOr. The code can be retrieved from here: In the original tests the block we are considering uses roughly 55 lines of code. Let’s start by examining a snippet from the original code: List&lt;Integer&gt; list = new ArrayList&lt;&gt;(); Query Results results = ksession.getQueryResults("p", new Integer[]{2}); for (final QueryResultsRow result : results) { list.add((Integer) result.get("x")); } assertThat(list.size()).isEqualTo(1); assertThat(list.get(0).intValue()).isEqualTo(2); This code retrieves query results from a Drools knowledge session (ksession) and iterates through the results to add them to a list. It then asserts the list size and content.  While this code works, it’s not as concise or expressive as it could be. Let’s see how we can improve this code. STEP 1 – USE ASSERTJ ASSERTIONS The snippet presented before uses AssertJ assertions. We can improve the code by leveraging the assertions for collections of AssertJ. List&lt;Integer&gt; list = new ArrayList&lt;&gt;(); QueryResults results = ksession.getQueryResults("p", new Integer[]{2}); for (final QueryResultsRow result : results) { list.add((Integer) result.get("x")); } assertThat(list).hasSize(1); assertThat(list).contains(2); These assertions are now clearer and simpler, but they can be simplified more. The first assertion states that list contains only one element, and the second assertion states that list contains exactly the element 2. So we can rewrite this snippet as follow: List&lt;Integer&gt; list = new ArrayList&lt;&gt;(); QueryResults results = ksession.getQueryResults("p", new Integer[]{2}); for (final QueryResultsRow result : results) { list.add((Integer) result.get("x")); } assertThat(list).containsExactly(2); STEP 2 – CREATE COLLECTIONS ON THE FLY USING EXTRACTING This is already simpler and better, however there is still the rather ugly code represented by the creation of the list collection. We are creating the list collection just for the assertion. Fortunately AssertJ has a very powerful mechanism to create collections on the fly and use them for assertions, named extracting. With extracting it is possible to take a collection, extract one or more properties from all the elements of the collections and then use the resulting collection to perform assertions. Here is the code using extracting: QueryResults results = ksession.getQueryResults("p", new Integer[]{2}); assertThat(results).extracting(r -&gt; r.get("x")).containsExactly(2); We have now removed the code for initializing the variable list, and we are down only two lines. STEP 3 – INLINE VARIABLE IN A SINGLE ASSERTION Looking at the getQueryResult method of the session, it is clear that it already takes a vararg argument, so it is not necessary to use an array. QueryResults results = ksession.getQueryResults("p", 2); assertThat(results).extracting(r -&gt; r.get("x")).containsExactly(2); As an optional step, we can remove the array and inline the result variable, obtaining a much more compacted version of our original assertion: assertThat(ksession.getQueryResults("p",2)).extracting(r -&gt; r.get("x")).containsExactly(2); This is marked optional since some people prefer to keep intermediate variables on separate lines for debugging purposes. STEP 4 – THE FINAL RESULT Repeating the process for all the original 55 lines of codes in the test produces the final result: assertThat(ksession.getQueryResults("p", 0)).extracting(r -&gt; r.get("x")).isEmpty(); assertThat(ksession.getQueryResults("p", 1)).extracting(r -&gt; r.get("x")).containsExactly(1); assertThat(ksession.getQueryResults("p", 2)).extracting(r -&gt; r.get("x")).containsExactly(2); assertThat(ksession.getQueryResults("p", 3)).extracting(r -&gt; r.get("x")).containsExactly(3); assertThat(ksession.getQueryResults("p", 4)).extracting(r -&gt; r.get("x")).isEmpty(); assertThat(ksession.getQueryResults("p", 5)).extracting(r -&gt; r.get("x")).isEmpty(); assertThat(ksession.getQueryResults("p", 6)).extracting(r -&gt; r.get("x")).containsExactly(6, 6); This uses only 7 lines of codes and it is much more clear than the original version. CONCLUSIONS In our view the new version of the code is better for several reasons: * Conciseness: The code is simplified, making it easier to understand at a glance. * Readability: The new version is more expressive, making it clear what the test is asserting. * AssertJ Capabilities: By leveraging the AssertJ library, you can take advantage of its powerful assertions and extraction methods, leading to more maintainable and flexible tests. We hope you can reuse part or all of these patterns to improve the tests of other projects.  The post appeared first on .</content><dc:creator>Paolo Bizzarri</dc:creator></entry><entry><title type="html">WildFly Release Plans</title><link rel="alternate" href="https://wildfly.org//news/2023/05/11/WildFly-Roadmap/" /><author><name>Brian Stansberry</name></author><id>https://wildfly.org//news/2023/05/11/WildFly-Roadmap/</id><updated>2023-05-11T00:00:00Z</updated><content type="html">As the WildFly project continues to move on from the major effort involved with integrating Jakarta EE 10, it’s time to go back to the roughly time-boxed development and release model that worked so well from WildFly 12 until WildFly 26. During that period, the WildFly project followed a roughly time-boxed development model. Roughly every three months we produced a new WildFly major release, with a large set of features, enhancements and bug fixes. We didn’t operate on a strict time schedule, but we tried to avoid significant schedule delays just to bring in particular feature or set of features. If a feature didn’t make a particular release it could just go in the next one a few months later. At the beginning of 2022, I and toward a feature-boxed approach. We did this because it was a more effective way to implement the transition to EE 10. But with that work behind us, the consensus among the WildFly developers is that moving back to the old time-boxed apprach will allow more effective delivery of new features and fixes to our users. Our aim is to produce feature releases in January, April, July and October. Experience has shown us that those months work best for not having development work overly disrupt summer or year end holidays. We’ll continue with our practice of releasing a Beta two weeks before the Final release, except for the January release, where the beta will be out somewhat earlier to avoid doing any release work in the latter part of December. 2023 - 2024 RELEASE SCHEDULE The following is a rough schedule of when we intend to do feature releases over the remainder of 2023 and through 2024. Please note that these dates are subject to change. Version Beta Release Final Release WildFly 29 June 29, 2023 July 13, 2023 WildFly 30 September 28, 2023 October 12, 2023 WildFly 31 December 14, 2023 January 11, 2024 WildFly 32 March 28, 2024 April 11, 2024 WildFly 33 June 27, 2024 July 11, 2024 WildFly 34 September 26, 2024 October 10, 2024 WildFly 35 December 12, 2024 January 9, 2025 WildFly is only roughly time boxed. We are certainly willing to delay a release to ensure adequate quality, and we would consider delaying a couple of weeks to include features of large enough significance. For example if a new MicroProfile release comes out in June and we need a bit more time to incorporate it in WildFly 29 we would consider delaying the WildFly 29 release somewhat. If we delayed a release we would not intend to then delay the next release; the next release would just have a shorter development window. The general idea though is to not block releasing waiting for features, as a quarterly cycle means a feature that misses a release can appear soon enough. MICRO RELEASES When we release each major we also create a new branch specific to that major. That branch is used to produce one micro (primarily bug fix) release for the major, with the micro usually released about a month after the major. This too is roughly time-boxed. Work on the WildFly 28.0.1 release, coordinated by Farah Juma, is currently in progress. The number of changes in the micro is typically small compared to what’s gone into main in the same period, as we want to be particularly conservative about introducing bugs or behavior changes in the micro. We’ve been consistently producing these micros since WildFly 17.0.1, and had done a few prior to that as well. QUESTIONS? If you have questions or want to provide feedback, I encourage you to post on the , on the or in . I will be starting a thread on the forum about this topic. Best regards, Brian</content><dc:creator>Brian Stansberry</dc:creator></entry></feed>
